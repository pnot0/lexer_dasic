Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> stmt
Rule 1     stmt -> prnt
Rule 2     stmt -> if
Rule 3     stmt -> cdlp
Rule 4     stmt -> func
Rule 5     stmt -> impt
Rule 6     stmt -> <empty>
Rule 7     if -> IF ID COND ID THEN stmt
Rule 8     if -> ELSIF ID COND ID THEN stmt
Rule 9     if -> ELSE stmt
Rule 10    cdlp -> FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT
Rule 11    cdlp -> DO stmt LOOP WHITIL ID COND ID
Rule 12    func -> DECLARE FUNCTION ID LPAREN ID RPAREN stmt END
Rule 13    func -> CALL ID LPAREN NUMBER RPAREN
Rule 14    impt -> IMPORT ID
Rule 15    prnt -> PRINT STRING

Terminals, with rules where they appear

ATT                  : 10
CALL                 : 13
COMMENT              : 
COND                 : 7 8 11
DECLARE              : 12
DO                   : 11
ELSE                 : 9
ELSIF                : 8
END                  : 12
FOR                  : 10
FUNCTION             : 12
ID                   : 7 7 8 8 10 11 11 12 12 13 14
IF                   : 7
IMPORT               : 14
LOOP                 : 11
LPAREN               : 12 13
NEXT                 : 10
NUMBER               : 10 10 10 13
PRINT                : 15
RPAREN               : 12 13
STEP                 : 10
STRING               : 15
THEN                 : 7 8
TO                   : 10
WHITIL               : 11
error                : 

Nonterminals, with rules where they appear

cdlp                 : 3
func                 : 4
if                   : 2
impt                 : 5
prnt                 : 1
stmt                 : 7 8 9 10 11 12 0

Parsing method: LALR

state 0

    (0) S' -> . stmt
    (1) stmt -> . prnt
    (2) stmt -> . if
    (3) stmt -> . cdlp
    (4) stmt -> . func
    (5) stmt -> . impt
    (6) stmt -> .
    (15) prnt -> . PRINT STRING
    (7) if -> . IF ID COND ID THEN stmt
    (8) if -> . ELSIF ID COND ID THEN stmt
    (9) if -> . ELSE stmt
    (10) cdlp -> . FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT
    (11) cdlp -> . DO stmt LOOP WHITIL ID COND ID
    (12) func -> . DECLARE FUNCTION ID LPAREN ID RPAREN stmt END
    (13) func -> . CALL ID LPAREN NUMBER RPAREN
    (14) impt -> . IMPORT ID

    $end            reduce using rule 6 (stmt -> .)
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    ELSIF           shift and go to state 9
    ELSE            shift and go to state 10
    FOR             shift and go to state 11
    DO              shift and go to state 12
    DECLARE         shift and go to state 13
    CALL            shift and go to state 14
    IMPORT          shift and go to state 15

    stmt                           shift and go to state 1
    prnt                           shift and go to state 2
    if                             shift and go to state 3
    cdlp                           shift and go to state 4
    func                           shift and go to state 5
    impt                           shift and go to state 6

state 1

    (0) S' -> stmt .



state 2

    (1) stmt -> prnt .

    $end            reduce using rule 1 (stmt -> prnt .)
    LOOP            reduce using rule 1 (stmt -> prnt .)
    END             reduce using rule 1 (stmt -> prnt .)
    NEXT            reduce using rule 1 (stmt -> prnt .)


state 3

    (2) stmt -> if .

    $end            reduce using rule 2 (stmt -> if .)
    LOOP            reduce using rule 2 (stmt -> if .)
    END             reduce using rule 2 (stmt -> if .)
    NEXT            reduce using rule 2 (stmt -> if .)


state 4

    (3) stmt -> cdlp .

    $end            reduce using rule 3 (stmt -> cdlp .)
    LOOP            reduce using rule 3 (stmt -> cdlp .)
    END             reduce using rule 3 (stmt -> cdlp .)
    NEXT            reduce using rule 3 (stmt -> cdlp .)


state 5

    (4) stmt -> func .

    $end            reduce using rule 4 (stmt -> func .)
    LOOP            reduce using rule 4 (stmt -> func .)
    END             reduce using rule 4 (stmt -> func .)
    NEXT            reduce using rule 4 (stmt -> func .)


state 6

    (5) stmt -> impt .

    $end            reduce using rule 5 (stmt -> impt .)
    LOOP            reduce using rule 5 (stmt -> impt .)
    END             reduce using rule 5 (stmt -> impt .)
    NEXT            reduce using rule 5 (stmt -> impt .)


state 7

    (15) prnt -> PRINT . STRING

    STRING          shift and go to state 16


state 8

    (7) if -> IF . ID COND ID THEN stmt

    ID              shift and go to state 17


state 9

    (8) if -> ELSIF . ID COND ID THEN stmt

    ID              shift and go to state 18


state 10

    (9) if -> ELSE . stmt
    (1) stmt -> . prnt
    (2) stmt -> . if
    (3) stmt -> . cdlp
    (4) stmt -> . func
    (5) stmt -> . impt
    (6) stmt -> .
    (15) prnt -> . PRINT STRING
    (7) if -> . IF ID COND ID THEN stmt
    (8) if -> . ELSIF ID COND ID THEN stmt
    (9) if -> . ELSE stmt
    (10) cdlp -> . FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT
    (11) cdlp -> . DO stmt LOOP WHITIL ID COND ID
    (12) func -> . DECLARE FUNCTION ID LPAREN ID RPAREN stmt END
    (13) func -> . CALL ID LPAREN NUMBER RPAREN
    (14) impt -> . IMPORT ID

    $end            reduce using rule 6 (stmt -> .)
    LOOP            reduce using rule 6 (stmt -> .)
    END             reduce using rule 6 (stmt -> .)
    NEXT            reduce using rule 6 (stmt -> .)
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    ELSIF           shift and go to state 9
    ELSE            shift and go to state 10
    FOR             shift and go to state 11
    DO              shift and go to state 12
    DECLARE         shift and go to state 13
    CALL            shift and go to state 14
    IMPORT          shift and go to state 15

    stmt                           shift and go to state 19
    prnt                           shift and go to state 2
    if                             shift and go to state 3
    cdlp                           shift and go to state 4
    func                           shift and go to state 5
    impt                           shift and go to state 6

state 11

    (10) cdlp -> FOR . ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT

    ID              shift and go to state 20


state 12

    (11) cdlp -> DO . stmt LOOP WHITIL ID COND ID
    (1) stmt -> . prnt
    (2) stmt -> . if
    (3) stmt -> . cdlp
    (4) stmt -> . func
    (5) stmt -> . impt
    (6) stmt -> .
    (15) prnt -> . PRINT STRING
    (7) if -> . IF ID COND ID THEN stmt
    (8) if -> . ELSIF ID COND ID THEN stmt
    (9) if -> . ELSE stmt
    (10) cdlp -> . FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT
    (11) cdlp -> . DO stmt LOOP WHITIL ID COND ID
    (12) func -> . DECLARE FUNCTION ID LPAREN ID RPAREN stmt END
    (13) func -> . CALL ID LPAREN NUMBER RPAREN
    (14) impt -> . IMPORT ID

    LOOP            reduce using rule 6 (stmt -> .)
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    ELSIF           shift and go to state 9
    ELSE            shift and go to state 10
    FOR             shift and go to state 11
    DO              shift and go to state 12
    DECLARE         shift and go to state 13
    CALL            shift and go to state 14
    IMPORT          shift and go to state 15

    stmt                           shift and go to state 21
    prnt                           shift and go to state 2
    if                             shift and go to state 3
    cdlp                           shift and go to state 4
    func                           shift and go to state 5
    impt                           shift and go to state 6

state 13

    (12) func -> DECLARE . FUNCTION ID LPAREN ID RPAREN stmt END

    FUNCTION        shift and go to state 22


state 14

    (13) func -> CALL . ID LPAREN NUMBER RPAREN

    ID              shift and go to state 23


state 15

    (14) impt -> IMPORT . ID

    ID              shift and go to state 24


state 16

    (15) prnt -> PRINT STRING .

    $end            reduce using rule 15 (prnt -> PRINT STRING .)
    LOOP            reduce using rule 15 (prnt -> PRINT STRING .)
    END             reduce using rule 15 (prnt -> PRINT STRING .)
    NEXT            reduce using rule 15 (prnt -> PRINT STRING .)


state 17

    (7) if -> IF ID . COND ID THEN stmt

    COND            shift and go to state 25


state 18

    (8) if -> ELSIF ID . COND ID THEN stmt

    COND            shift and go to state 26


state 19

    (9) if -> ELSE stmt .

    $end            reduce using rule 9 (if -> ELSE stmt .)
    LOOP            reduce using rule 9 (if -> ELSE stmt .)
    END             reduce using rule 9 (if -> ELSE stmt .)
    NEXT            reduce using rule 9 (if -> ELSE stmt .)


state 20

    (10) cdlp -> FOR ID . ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT

    ATT             shift and go to state 27


state 21

    (11) cdlp -> DO stmt . LOOP WHITIL ID COND ID

    LOOP            shift and go to state 28


state 22

    (12) func -> DECLARE FUNCTION . ID LPAREN ID RPAREN stmt END

    ID              shift and go to state 29


state 23

    (13) func -> CALL ID . LPAREN NUMBER RPAREN

    LPAREN          shift and go to state 30


state 24

    (14) impt -> IMPORT ID .

    $end            reduce using rule 14 (impt -> IMPORT ID .)
    LOOP            reduce using rule 14 (impt -> IMPORT ID .)
    END             reduce using rule 14 (impt -> IMPORT ID .)
    NEXT            reduce using rule 14 (impt -> IMPORT ID .)


state 25

    (7) if -> IF ID COND . ID THEN stmt

    ID              shift and go to state 31


state 26

    (8) if -> ELSIF ID COND . ID THEN stmt

    ID              shift and go to state 32


state 27

    (10) cdlp -> FOR ID ATT . NUMBER TO NUMBER STEP NUMBER stmt NEXT

    NUMBER          shift and go to state 33


state 28

    (11) cdlp -> DO stmt LOOP . WHITIL ID COND ID

    WHITIL          shift and go to state 34


state 29

    (12) func -> DECLARE FUNCTION ID . LPAREN ID RPAREN stmt END

    LPAREN          shift and go to state 35


state 30

    (13) func -> CALL ID LPAREN . NUMBER RPAREN

    NUMBER          shift and go to state 36


state 31

    (7) if -> IF ID COND ID . THEN stmt

    THEN            shift and go to state 37


state 32

    (8) if -> ELSIF ID COND ID . THEN stmt

    THEN            shift and go to state 38


state 33

    (10) cdlp -> FOR ID ATT NUMBER . TO NUMBER STEP NUMBER stmt NEXT

    TO              shift and go to state 39


state 34

    (11) cdlp -> DO stmt LOOP WHITIL . ID COND ID

    ID              shift and go to state 40


state 35

    (12) func -> DECLARE FUNCTION ID LPAREN . ID RPAREN stmt END

    ID              shift and go to state 41


state 36

    (13) func -> CALL ID LPAREN NUMBER . RPAREN

    RPAREN          shift and go to state 42


state 37

    (7) if -> IF ID COND ID THEN . stmt
    (1) stmt -> . prnt
    (2) stmt -> . if
    (3) stmt -> . cdlp
    (4) stmt -> . func
    (5) stmt -> . impt
    (6) stmt -> .
    (15) prnt -> . PRINT STRING
    (7) if -> . IF ID COND ID THEN stmt
    (8) if -> . ELSIF ID COND ID THEN stmt
    (9) if -> . ELSE stmt
    (10) cdlp -> . FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT
    (11) cdlp -> . DO stmt LOOP WHITIL ID COND ID
    (12) func -> . DECLARE FUNCTION ID LPAREN ID RPAREN stmt END
    (13) func -> . CALL ID LPAREN NUMBER RPAREN
    (14) impt -> . IMPORT ID

    $end            reduce using rule 6 (stmt -> .)
    LOOP            reduce using rule 6 (stmt -> .)
    END             reduce using rule 6 (stmt -> .)
    NEXT            reduce using rule 6 (stmt -> .)
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    ELSIF           shift and go to state 9
    ELSE            shift and go to state 10
    FOR             shift and go to state 11
    DO              shift and go to state 12
    DECLARE         shift and go to state 13
    CALL            shift and go to state 14
    IMPORT          shift and go to state 15

    stmt                           shift and go to state 43
    prnt                           shift and go to state 2
    if                             shift and go to state 3
    cdlp                           shift and go to state 4
    func                           shift and go to state 5
    impt                           shift and go to state 6

state 38

    (8) if -> ELSIF ID COND ID THEN . stmt
    (1) stmt -> . prnt
    (2) stmt -> . if
    (3) stmt -> . cdlp
    (4) stmt -> . func
    (5) stmt -> . impt
    (6) stmt -> .
    (15) prnt -> . PRINT STRING
    (7) if -> . IF ID COND ID THEN stmt
    (8) if -> . ELSIF ID COND ID THEN stmt
    (9) if -> . ELSE stmt
    (10) cdlp -> . FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT
    (11) cdlp -> . DO stmt LOOP WHITIL ID COND ID
    (12) func -> . DECLARE FUNCTION ID LPAREN ID RPAREN stmt END
    (13) func -> . CALL ID LPAREN NUMBER RPAREN
    (14) impt -> . IMPORT ID

    $end            reduce using rule 6 (stmt -> .)
    LOOP            reduce using rule 6 (stmt -> .)
    END             reduce using rule 6 (stmt -> .)
    NEXT            reduce using rule 6 (stmt -> .)
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    ELSIF           shift and go to state 9
    ELSE            shift and go to state 10
    FOR             shift and go to state 11
    DO              shift and go to state 12
    DECLARE         shift and go to state 13
    CALL            shift and go to state 14
    IMPORT          shift and go to state 15

    stmt                           shift and go to state 44
    prnt                           shift and go to state 2
    if                             shift and go to state 3
    cdlp                           shift and go to state 4
    func                           shift and go to state 5
    impt                           shift and go to state 6

state 39

    (10) cdlp -> FOR ID ATT NUMBER TO . NUMBER STEP NUMBER stmt NEXT

    NUMBER          shift and go to state 45


state 40

    (11) cdlp -> DO stmt LOOP WHITIL ID . COND ID

    COND            shift and go to state 46


state 41

    (12) func -> DECLARE FUNCTION ID LPAREN ID . RPAREN stmt END

    RPAREN          shift and go to state 47


state 42

    (13) func -> CALL ID LPAREN NUMBER RPAREN .

    $end            reduce using rule 13 (func -> CALL ID LPAREN NUMBER RPAREN .)
    LOOP            reduce using rule 13 (func -> CALL ID LPAREN NUMBER RPAREN .)
    END             reduce using rule 13 (func -> CALL ID LPAREN NUMBER RPAREN .)
    NEXT            reduce using rule 13 (func -> CALL ID LPAREN NUMBER RPAREN .)


state 43

    (7) if -> IF ID COND ID THEN stmt .

    $end            reduce using rule 7 (if -> IF ID COND ID THEN stmt .)
    LOOP            reduce using rule 7 (if -> IF ID COND ID THEN stmt .)
    END             reduce using rule 7 (if -> IF ID COND ID THEN stmt .)
    NEXT            reduce using rule 7 (if -> IF ID COND ID THEN stmt .)


state 44

    (8) if -> ELSIF ID COND ID THEN stmt .

    $end            reduce using rule 8 (if -> ELSIF ID COND ID THEN stmt .)
    LOOP            reduce using rule 8 (if -> ELSIF ID COND ID THEN stmt .)
    END             reduce using rule 8 (if -> ELSIF ID COND ID THEN stmt .)
    NEXT            reduce using rule 8 (if -> ELSIF ID COND ID THEN stmt .)


state 45

    (10) cdlp -> FOR ID ATT NUMBER TO NUMBER . STEP NUMBER stmt NEXT

    STEP            shift and go to state 48


state 46

    (11) cdlp -> DO stmt LOOP WHITIL ID COND . ID

    ID              shift and go to state 49


state 47

    (12) func -> DECLARE FUNCTION ID LPAREN ID RPAREN . stmt END
    (1) stmt -> . prnt
    (2) stmt -> . if
    (3) stmt -> . cdlp
    (4) stmt -> . func
    (5) stmt -> . impt
    (6) stmt -> .
    (15) prnt -> . PRINT STRING
    (7) if -> . IF ID COND ID THEN stmt
    (8) if -> . ELSIF ID COND ID THEN stmt
    (9) if -> . ELSE stmt
    (10) cdlp -> . FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT
    (11) cdlp -> . DO stmt LOOP WHITIL ID COND ID
    (12) func -> . DECLARE FUNCTION ID LPAREN ID RPAREN stmt END
    (13) func -> . CALL ID LPAREN NUMBER RPAREN
    (14) impt -> . IMPORT ID

    END             reduce using rule 6 (stmt -> .)
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    ELSIF           shift and go to state 9
    ELSE            shift and go to state 10
    FOR             shift and go to state 11
    DO              shift and go to state 12
    DECLARE         shift and go to state 13
    CALL            shift and go to state 14
    IMPORT          shift and go to state 15

    stmt                           shift and go to state 50
    prnt                           shift and go to state 2
    if                             shift and go to state 3
    cdlp                           shift and go to state 4
    func                           shift and go to state 5
    impt                           shift and go to state 6

state 48

    (10) cdlp -> FOR ID ATT NUMBER TO NUMBER STEP . NUMBER stmt NEXT

    NUMBER          shift and go to state 51


state 49

    (11) cdlp -> DO stmt LOOP WHITIL ID COND ID .

    $end            reduce using rule 11 (cdlp -> DO stmt LOOP WHITIL ID COND ID .)
    LOOP            reduce using rule 11 (cdlp -> DO stmt LOOP WHITIL ID COND ID .)
    END             reduce using rule 11 (cdlp -> DO stmt LOOP WHITIL ID COND ID .)
    NEXT            reduce using rule 11 (cdlp -> DO stmt LOOP WHITIL ID COND ID .)


state 50

    (12) func -> DECLARE FUNCTION ID LPAREN ID RPAREN stmt . END

    END             shift and go to state 52


state 51

    (10) cdlp -> FOR ID ATT NUMBER TO NUMBER STEP NUMBER . stmt NEXT
    (1) stmt -> . prnt
    (2) stmt -> . if
    (3) stmt -> . cdlp
    (4) stmt -> . func
    (5) stmt -> . impt
    (6) stmt -> .
    (15) prnt -> . PRINT STRING
    (7) if -> . IF ID COND ID THEN stmt
    (8) if -> . ELSIF ID COND ID THEN stmt
    (9) if -> . ELSE stmt
    (10) cdlp -> . FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT
    (11) cdlp -> . DO stmt LOOP WHITIL ID COND ID
    (12) func -> . DECLARE FUNCTION ID LPAREN ID RPAREN stmt END
    (13) func -> . CALL ID LPAREN NUMBER RPAREN
    (14) impt -> . IMPORT ID

    NEXT            reduce using rule 6 (stmt -> .)
    PRINT           shift and go to state 7
    IF              shift and go to state 8
    ELSIF           shift and go to state 9
    ELSE            shift and go to state 10
    FOR             shift and go to state 11
    DO              shift and go to state 12
    DECLARE         shift and go to state 13
    CALL            shift and go to state 14
    IMPORT          shift and go to state 15

    stmt                           shift and go to state 53
    prnt                           shift and go to state 2
    if                             shift and go to state 3
    cdlp                           shift and go to state 4
    func                           shift and go to state 5
    impt                           shift and go to state 6

state 52

    (12) func -> DECLARE FUNCTION ID LPAREN ID RPAREN stmt END .

    $end            reduce using rule 12 (func -> DECLARE FUNCTION ID LPAREN ID RPAREN stmt END .)
    LOOP            reduce using rule 12 (func -> DECLARE FUNCTION ID LPAREN ID RPAREN stmt END .)
    END             reduce using rule 12 (func -> DECLARE FUNCTION ID LPAREN ID RPAREN stmt END .)
    NEXT            reduce using rule 12 (func -> DECLARE FUNCTION ID LPAREN ID RPAREN stmt END .)


state 53

    (10) cdlp -> FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt . NEXT

    NEXT            shift and go to state 54


state 54

    (10) cdlp -> FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT .

    $end            reduce using rule 10 (cdlp -> FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT .)
    LOOP            reduce using rule 10 (cdlp -> FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT .)
    END             reduce using rule 10 (cdlp -> FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT .)
    NEXT            reduce using rule 10 (cdlp -> FOR ID ATT NUMBER TO NUMBER STEP NUMBER stmt NEXT .)

